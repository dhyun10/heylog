<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="blog">
	<insert id="insertGuest" parameterType="com.myblog.heylog.blog.Blog">
		insert into guest(blogNum, guestNum, userId, content, created, secretType) 
		values (#{blogNum}, guest_seq.nextval, #{userId}, #{content}, sysdate, #{secretType})
	</insert>
	
	<select id="listGuest" resultType="com.myblog.heylog.blog.Blog">
		select blogNum, g.guestNum, g.userId, userNick, content, 
			to_char(created, 'YYYY-MM-DD HH24:MI') created, secretType, replyCount 
		from guest g
		join member1 m on m.userId=g.userId
		LEFT OUTER JOIN (
			SELECT guestNum, COUNT(*) replyCount FROM guestreply
			GROUP BY guestNum
		) r ON g.guestNum=r.guestNum
		where blogNum=#{blogNum}
		order by guestNum desc
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY 
	</select>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		select nvl(COUNT(*), 0)
		from guest
		where blogNum=#{blogNum}	
	</select>
	
	<update id="updateGuest" parameterType="com.myblog.heylog.blog.Blog">
		update guest set content=#{content}, secretType=#{secretType}
		where blogNum=#{blogNum} and guestNum=#{guestNum}
	</update>
	
	<delete id="deleteGuest" parameterType="com.myblog.heylog.blog.Blog">
		delete from guest
		where blogNum=#{blogNum} and guestNum=#{guestNum}
	</delete>
	
	<insert id="insertGuestReply" parameterType="com.myblog.heylog.blog.Reply">
		insert into guestreply(guestNum, replyNum, userId, content, created) values
			(#{guestNum}, guestreply_seq.nextval, #{userId}, #{content}, sysdate)
	</insert>
	
	<select id="guestReplyCount" parameterType="map" resultType="Integer">
		select nvl(COUNT(*), 0)
		from guestreply
		where guestNum=#{guestNum}	
	</select>
	
	<select id="listGuestReply" resultType="com.myblog.heylog.blog.Reply">
		select guestNum, replyNum, r.userId, userNick, content, to_char(created, 'YYYY-MM-DD HH24:MI') created
		from guestreply r
		join member1 m on r.userId=m.userId
		where guestNum=#{guestNum}  
		order by replyNum asc
	</select>
	
	<delete id="deleteGuestReply" parameterType="com.myblog.heylog.blog.Reply">
		delete from guestreply
		where replyNum=#{replyNum}
	</delete>
	
	<select id="board_seq" resultType="Integer">
		SELECT board_seq.NEXTVAL FROM dual
	</select>
	
	<select id="tag_seq" resultType="Integer">
		SELECT tag_seq.NEXTVAL FROM dual
	</select>
	
	<insert id="insertBoard" parameterType="com.myblog.heylog.blog.Board">
		insert into board(categoryNum, userId, boardNum, subject, content, hitCount, created, thumbnail, enabled)
		values (#{categoryNum}, #{userId}, #{boardNum}, #{subject}, #{content}, 0, sysdate, 'none', 1)
	</insert>	
	
	<update id="insertTag" parameterType="map">
		<![CDATA[
		insert all
		into tag(tagNum, tag) values (#{tagNum}, #{tag})
		into board_tag(boardNum, tagNum, created) values (#{boardNum}, #{tagNum}, sysdate)
		select * from sys.dual
		]]>
	</update>
	
	<select id="listBoard" resultType="com.myblog.heylog.blog.Board">
		select userId, c.category, boardNum, subject, content, to_char(created, 'YYYY.MM.DD') created, b.enabled
		from board b
		join category c on c.categoryNum=b.categoryNum
		where userId=#{userId}
		<if test="category!=null and category!=''">
			and c.category=#{category}
		</if>
		order by boardNum desc
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY 
	</select>
	
	<select id="readBoard" resultType="com.myblog.heylog.blog.Board">
		select boardNum, c.category, b.categoryNum, subject, content, to_char(created, 'YYYY.MM.DD HH24:MI') created, hitCount
		from board b
		join category c on c.categoryNum=b.categoryNum
		where boardNum=#{boardNum} and userId=#{userId}
	</select>
	
	<select id="readTag" resultType="com.myblog.heylog.blog.Board">
		select t.tag, t.tagNum, b.boardNum 
		from board b
		left outer join (
		    select boardNum, tagNum from board_tag
		) tb on b.boardNum=tb.boardNum
		left outer join (
		    select tagNum, tag from tag
		) t on t.tagNum=tb.tagnum
		where b.boardNum=#{boardNum}
		order by t.tagNum desc
	</select>
	
	<update id="updateHitCount" parameterType="com.myblog.heylog.blog.Board">
		update board set hitCount=hitCount+1 
		where boardNum=#{boardNum}
	</update>
	
	<select id="boardCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM board b
		join category c on c.categoryNum=b.categoryNum
		where userId=#{userId}
		<if test="category!=null and category!=''">
			and c.category=#{category}
		</if>
	</select>
	
	<update id="updateBoard" parameterType="com.myblog.heylog.blog.Board">
		update board set subject=#{subject}, content=#{content}, categoryNum=#{categoryNum}
		where boardNum=#{boardNum}
	</update>
	
	<delete id="deleteBoard" parameterType="com.myblog.heylog.blog.Board">
		delete from board
		where boardNum=#{boardNum}
	</delete>
</mapper>